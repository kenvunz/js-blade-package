<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>fileTypes</key>
	<array>
		<string>blade</string>
	</array>
	<key>name</key>
	<string>JS Blade</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>comment</key>
			<string>Doctype declaration.</string>
			<key>match</key>
			<string>^(!!!|doctype)(\s*[a-zA-Z0-9-_]+)?</string>
			<key>name</key>
			<string>comment.other.doctype.blade</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>^(\s*)//-</string>
			<key>comment</key>
			<string>Unbuffered (blade-only) comments.</string>
			<key>end</key>
			<string>^(?!(\1\s)|\s*$)</string>
			<key>name</key>
			<string>comment.unbuffered.block.blade</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>^(\s*)//</string>
			<key>comment</key>
			<string>Buffered (html) comments.</string>
			<key>end</key>
			<string>^(?!(\1\s)|\s*$)</string>
			<key>name</key>
			<string>string.comment.buffered.block.blade</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>invalid.illegal.comment.comment.block.blade</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>Buffered comments inside buffered comments will generate invalid html.</string>
					<key>match</key>
					<string>^\s*(//)(?!-)</string>
					<key>name</key>
					<string>string.comment.buffered.block.blade</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>^(\s*)(script)(?=[.#(\s])</string>
			<key>beginCaptures</key>
			<dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.tag.script.blade</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>Script tag with JavaScript code.</string>
			<key>end</key>
			<string>^(?!(\1\s)|\s*$)</string>
			<key>name</key>
			<string>source.script.blade</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>\G(?=\()</string>
					<key>end</key>
					<string>$</string>
					<key>name</key>
					<string>stuff.tag.script.blade</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#tag_attributes</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>\G(?=[.#])</string>
					<key>end</key>
					<string>$</string>
					<key>name</key>
					<string>stuff.tag.script.blade</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#complete_tag</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>include</key>
					<string>source.js</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>^(\s*)(style)(?=[.#(\s])</string>
			<key>beginCaptures</key>
			<dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.tag.script.blade</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>Style tag with CSS code.</string>
			<key>end</key>
			<string>^(?!(\1\s)|\s*$)</string>
			<key>name</key>
			<string>source.style.blade</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>\G(?=\()</string>
					<key>end</key>
					<string>$</string>
					<key>name</key>
					<string>stuff.tag.style.blade</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#tag_attributes</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>\G(?=[.#])</string>
					<key>end</key>
					<string>$</string>
					<key>name</key>
					<string>stuff.tag.style.blade</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#complete_tag</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>include</key>
					<string>source.css</string>
				</dict>
			</array>
		</dict>
        <dict>
            <key>begin</key>
            <string>^(\s*):(javascript|js)(?=\(|$)$</string>
            <key>beginCaptures</key>
            <dict>
                <key>2</key>
                <dict>
                    <key>name</key>
                    <string>constant.language.name.javascript.filter.blade</string>
                </dict>
            </dict>
            <key>end</key>
            <string>^(?!(\1\s)|\s*$)</string>
            <key>name</key>
            <string>source.script.blade</string>
            <key>patterns</key>
            <array>
                <dict>
                    <key>begin</key>
                    <string>\G(?=\()</string>
                    <key>end</key>
                    <string>$</string>
                    <key>name</key>
                    <string>stuff.tag.script.blade</string>
                    <key>patterns</key>
                    <array>
                        <dict>
                            <key>include</key>
                            <string>#tag_attributes</string>
                        </dict>
                    </array>
                </dict>
                <dict>
                    <key>begin</key>
                    <string>\G(?=[.#])</string>
                    <key>end</key>
                    <string>$</string>
                    <key>name</key>
                    <string>stuff.tag.script.blade</string>
                    <key>patterns</key>
                    <array>
                        <dict>
                            <key>include</key>
                            <string>#complete_tag</string>
                        </dict>
                    </array>
                </dict>
                <dict>
                    <key>include</key>
                    <string>source.js</string>
                </dict>
            </array>
        </dict>
		<dict>
			<key>begin</key>
			<string>^(\s*):(markdown|md)(?=\(|$)$</string>
			<key>beginCaptures</key>
			<dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>constant.language.name.markdown.filter.blade</string>
				</dict>
			</dict>
			<key>end</key>
			<string>^(?!(\1\s)|\s*$)</string>
			<key>name</key>
			<string>text.markdown.filter.blade</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#filter_args</string>
				</dict>
				<dict>
					<key>include</key>
					<string>text.html.markdown</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>^(\s*):(sass)(?=\(|$)$</string>
			<key>beginCaptures</key>
			<dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>constant.language.name.sass.filter.blade</string>
				</dict>
			</dict>
			<key>end</key>
			<string>^(?!(\1\s)|\s*$)</string>
			<key>name</key>
			<string>source.sass.filter.blade</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#filter_args</string>
				</dict>
				<dict>
					<key>include</key>
					<string>source.sass</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>^(\s*):(less)(?=\(|$)$</string>
			<key>beginCaptures</key>
			<dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>constant.language.name.less.filter.blade</string>
				</dict>
			</dict>
			<key>end</key>
			<string>^(?!(\1\s)|\s*$)</string>
			<key>name</key>
			<string>source.less.filter.blade</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#filter_args</string>
				</dict>
				<dict>
					<key>include</key>
					<string>source.less</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>^(\s*):(stylus)(?=\(|$)$</string>
			<key>beginCaptures</key>
			<dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>constant.language.name.stylus.filter.blade</string>
				</dict>
			</dict>
			<key>end</key>
			<string>^(?!(\1\s)|\s*$)</string>
			<key>name</key>
			<string>source.stylus.filter.blade</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#filter_args</string>
				</dict>
				<dict>
					<key>include</key>
					<string>source.stylus</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>^(\s*):(coffeescript)(?=\(|$)</string>
			<key>beginCaptures</key>
			<dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>constant.language.name.coffeescript.filter.blade</string>
				</dict>
			</dict>
			<key>end</key>
			<string>^(?!(\1\s)|\s*$)</string>
			<key>name</key>
			<string>source.coffeescript.filter.blade</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#filter_args</string>
				</dict>
				<dict>
					<key>include</key>
					<string>source.coffee</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>^(\s*)((:(?=.))|(:$))</string>
			<key>beginCaptures</key>
			<dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>invalid.illegal.empty.generic.filter.blade</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>Generic Jade filter.</string>
			<key>end</key>
			<string>^(?!(\1\s)|\s*$)</string>
			<key>name</key>
			<string>text.generic.filter.blade</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>\G(?&lt;=:)(?=.)</string>
					<key>end</key>
					<string>$</string>
					<key>name</key>
					<string>name.generic.filter.blade</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>\G\(</string>
							<key>name</key>
							<string>invalid.illegal.name.generic.filter.blade</string>
						</dict>
						<dict>
							<key>match</key>
							<string>\w</string>
							<key>name</key>
							<string>constant.language.name.generic.filter.blade</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#filter_args</string>
						</dict>
						<dict>
							<key>match</key>
							<string>\W</string>
							<key>name</key>
							<string>invalid.illegal.name.generic.filter.blade</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>^(\s*)(?=[\w.#].*?\.$)(?=(?:(?:(?:(?:(?:#[\w-]+)|(?:\.[\w-]+))|(?:(?:[#!]\{[^}]*\})|(?:\w(?:(?:[\w:-]+[\w-])|(?:[\w-]*)))))(?:(?:#[\w-]+)|(?:\.[\w-]+)|(?:\((?:[^()\'\"]*(?:(?:\'(?:[^\']|(?:(?&lt;!\\)\\\'))*\')|(?:\"(?:[^\"]|(?:(?&lt;!\\)\\\"))*\")))*[^()]*\))*)*)(?:(?:(?::\s+)|(?&lt;=\)))(?:(?:(?:(?:#[\w-]+)|(?:\.[\w-]+))|(?:(?:[#!]\{[^}]*\})|(?:\w(?:(?:[\w:-]+[\w-])|(?:[\w-]*)))))(?:(?:#[\w-]+)|(?:\.[\w-]+)|(?:\((?:[^()\'\"]*(?:(?:\'(?:[^\']|(?:(?&lt;!\\)\\\'))*\')|(?:\"(?:[^\"]|(?:(?&lt;!\\)\\\"))*\")))*[^()]*\))*)*))*)\.$)(?:(?:(#[\w-]+)|(\.[\w-]+))|((?:[#!]\{[^}]*\})|(?:\w(?:(?:[\w:-]+[\w-])|(?:[\w-]*)))))</string>
			<key>beginCaptures</key>
			<dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>constant.id.tag.blade</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>string.name.classes.tag.blade</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>entity.name.tag.blade</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>Generated from dot_block_tag.py</string>
			<key>end</key>
			<string>^(?!(\1\s)|\s*$)</string>
			<key>name</key>
			<string>text.block.dot.tag.blade</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#tag_attributes</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#complete_tag</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>^(?=.)</string>
					<key>end</key>
					<string>$</string>
					<key>name</key>
					<string>text.block.blade</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#embedded_html</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#html_entity</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#interpolated_value</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>^\s*</string>
			<key>comment</key>
			<string>All constructs that generally span a single line starting with any number of white-spaces.</string>
			<key>end</key>
			<string>$</string>
			<key>name</key>
			<string>tag.blade</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#blocks_and_includes</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#unbuffered_code</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#mixins</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#flow_control</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#case_conds</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>\|</string>
					<key>comment</key>
					<string>Tag pipe text line.</string>
					<key>end</key>
					<string>$</string>
					<key>name</key>
					<string>text.block.pipe.blade</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#embedded_html</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#html_entity</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#interpolated_value</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>include</key>
					<string>#printed_expression</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>\G((?=&lt;)|[^\w.#]|(\.[^\w-]))|(#[^\{\w-])</string>
					<key>comment</key>
					<string>Line starting with characters incompatible with tag name/id/class is standalone text.</string>
					<key>end</key>
					<string>$</string>
					<key>name</key>
					<string>text.blade</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#embedded_html</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#html_entity</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#interpolated_value</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>include</key>
					<string>#complete_tag</string>
				</dict>
			</array>
		</dict>
	</array>
	<key>repository</key>
	<dict>
		<key>blocks_and_includes</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.type.import.include.blade</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>variable.control.import.include.blade</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>Template blocks and includes.</string>
			<key>match</key>
			<string>(extends|include|yield|append|prepend|block( (append|prepend))?)\s+(.*)$</string>
			<key>name</key>
			<string>meta.first-class.blade</string>
		</dict>
		<key>case_conds</key>
		<dict>
			<key>begin</key>
			<string>(default|when)((\s+|(?=:))|$)</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.type.function.blade</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>Jade case conditionals.</string>
			<key>end</key>
			<string>$</string>
			<key>name</key>
			<string>meta.control.flow.blade</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>\G(?!:)</string>
					<key>end</key>
					<string>(?=:\s+)|$</string>
					<key>name</key>
					<string>js.embedded.control.flow.blade</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#case_when_paren</string>
						</dict>
						<dict>
							<key>include</key>
							<string>source.js</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>:\s+</string>
					<key>end</key>
					<string>$</string>
					<key>name</key>
					<string>tag.case.control.flow.blade</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#complete_tag</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>case_when_paren</key>
		<dict>
			<key>begin</key>
			<string>\(</string>
			<key>end</key>
			<string>\)</string>
			<key>name</key>
			<string>js.when.control.flow.blade</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#case_when_paren</string>
				</dict>
				<dict>
					<key>match</key>
					<string>:</string>
					<key>name</key>
					<string>invalid.illegal.name.tag.blade</string>
				</dict>
				<dict>
					<key>include</key>
					<string>source.js</string>
				</dict>
			</array>
		</dict>
		<key>complete_tag</key>
		<dict>
			<key>begin</key>
			<string>(?=[\w.#])|(:\s*)</string>
			<key>end</key>
			<string>(\.?$)|(?=:.)</string>
			<key>name</key>
			<string>complete_tag.blade</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#blocks_and_includes</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#unbuffered_code</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#mixins</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#flow_control</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;=:)\w.*$</string>
					<key>name</key>
					<string>invalid.illegal.name.tag.blade</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#tag_name</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#tag_id</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#tag_classes</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#tag_attributes</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>invalid.illegal.end.tag.blade</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>invalid.illegal.end.tag.blade</string>
						</dict>
					</dict>
					<key>match</key>
					<string>((\.)\s+$)|((:)\s*$)</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#printed_expression</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#tag_text</string>
				</dict>
			</array>
		</dict>
		<key>embedded_html</key>
		<dict>
			<key>begin</key>
			<string>(?=&lt;[^&gt;]*&gt;)</string>
			<key>end</key>
			<string>$|(?=&gt;)</string>
			<key>name</key>
			<string>html</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>text.html.basic</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#interpolated_value</string>
				</dict>
			</array>
		</dict>
		<key>filter_args</key>
		<dict>
			<key>begin</key>
			<string>\G(\()</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>meta.args.filter.blade</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>invalid.illegal.extra.args.filter.blade</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(\))(.*?$)</string>
			<key>name</key>
			<string>args.filter.blade</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>([^\s(),=]+)(=?)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.other.attribute-name.tag.blade</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.key-value.blade</string>
						</dict>
					</dict>
					<key>contentName</key>
					<string>string.value.args.filter.blade</string>
					<key>end</key>
					<string>((?=\))|,|$)</string>
					<key>name</key>
					<string>attributes.tag.blade</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#filter_args_paren</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>filter_args_paren</key>
		<dict>
			<key>begin</key>
			<string>\(</string>
			<key>end</key>
			<string>\)|$</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#filter_args_paren</string>
				</dict>
			</array>
		</dict>
		<key>flow_control</key>
		<dict>
			<key>begin</key>
			<string>(for|if|else if|else|each|until|while|unless|case)(\s+|$)</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.type.function.blade</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>Jade control flow.</string>
			<key>end</key>
			<string>$</string>
			<key>name</key>
			<string>meta.control.flow.blade</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string></string>
					<key>end</key>
					<string>$</string>
					<key>name</key>
					<string>js.embedded.control.flow.blade</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>source.js</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>html_entity</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(&amp;)([a-zA-Z0-9]+|#[0-9]+|#x[0-9a-fA-F]+)(;)</string>
					<key>name</key>
					<string>constant.character.entity.html.text.blade</string>
				</dict>
				<dict>
					<key>match</key>
					<string>[&lt;&gt;&amp;]</string>
					<key>name</key>
					<string>invalid.illegal.html_entity.text.blade</string>
				</dict>
			</array>
		</dict>
		<key>interpolated_value</key>
		<dict>
			<key>begin</key>
			<string>(?&lt;!\\)[#!]\{(?=.*?\})</string>
			<key>end</key>
			<string>\}</string>
			<key>name</key>
			<string>string.interpolated.blade</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>{</string>
					<key>name</key>
					<string>invalid.illegal.tag.blade</string>
				</dict>
				<dict>
					<key>include</key>
					<string>source.js</string>
				</dict>
			</array>
		</dict>
		<key>mixins</key>
		<dict>
			<key>begin</key>
			<string>(((mixin\s+)|\+)([\w-]+))\s*</string>
			<key>beginCaptures</key>
			<dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>storage.type.function.blade</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.blade</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>Mixin declaration and use, including the new '+' syntax.</string>
			<key>end</key>
			<string>$</string>
			<key>name</key>
			<string>meta.mixin.blade</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string></string>
					<key>end</key>
					<string>$</string>
					<key>name</key>
					<string>args.mixin.blade</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>source.js</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>printed_expression</key>
		<dict>
			<key>begin</key>
			<string>(!?\=)\s*</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>constant</string>
				</dict>
			</dict>
			<key>end</key>
			<string>$</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>source.js</string>
				</dict>
			</array>
		</dict>
		<key>string</key>
		<dict>
			<key>begin</key>
			<string>(['"])</string>
			<key>end</key>
			<string>(?&lt;!\\)\1</string>
			<key>name</key>
			<string>string.quoted.blade</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\\((x[0-9a-fA-F]{2})|(u[0-9]{4})|.)</string>
					<key>name</key>
					<string>constant.character.quoted.blade</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#interpolated_value</string>
				</dict>
			</array>
		</dict>
		<key>tag_attribute_value_braces</key>
		<dict>
			<key>begin</key>
			<string>\{</string>
			<key>end</key>
			<string>\}</string>
			<key>name</key>
			<string>js.value.attribute.tag.blade</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#tag_attribute_value_paren</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#tag_attribute_value_brackets</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#tag_attribute_value_braces</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#string</string>
				</dict>
				<dict>
					<key>include</key>
					<string>source.js</string>
				</dict>
			</array>
		</dict>
		<key>tag_attribute_value_brackets</key>
		<dict>
			<key>begin</key>
			<string>\[</string>
			<key>end</key>
			<string>\]</string>
			<key>name</key>
			<string>js.value.attribute.tag.blade</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#tag_attribute_value_paren</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#tag_attribute_value_brackets</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#tag_attribute_value_braces</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#string</string>
				</dict>
				<dict>
					<key>include</key>
					<string>source.js</string>
				</dict>
			</array>
		</dict>
		<key>tag_attribute_value_paren</key>
		<dict>
			<key>begin</key>
			<string>\(</string>
			<key>end</key>
			<string>\)</string>
			<key>name</key>
			<string>js.value.attribute.tag.blade</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#tag_attribute_value_paren</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#tag_attribute_value_brackets</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#tag_attribute_value_braces</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#string</string>
				</dict>
				<dict>
					<key>include</key>
					<string>source.js</string>
				</dict>
			</array>
		</dict>
		<key>tag_attributes</key>
		<dict>
			<key>begin</key>
			<string>(\()</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>constant.name.attribute.tag.blade</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(\))</string>
			<key>name</key>
			<string>attibutes.tag.blade</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.other.attribute-name.tag.blade</string>
						</dict>
					</dict>
					<key>match</key>
					<string>([^\s(),=]+)\s*((?=\))|,|$)</string>
					<key>name</key>
					<string>attribues.tag.blade</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>([^\s(),=]*[^\s(),=!])\s*(!?\=)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.other.attribute-name.tag.blade</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.key-value.blade</string>
						</dict>
					</dict>
					<key>end</key>
					<string>((?=\))|,|$)</string>
					<key>name</key>
					<string>attributes.tag.blade</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#tag_attribute_value_paren</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#tag_attribute_value_brackets</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#tag_attribute_value_braces</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#string</string>
						</dict>
						<dict>
							<key>include</key>
							<string>source.js</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>tag_classes</key>
		<dict>
			<key>match</key>
			<string>\.[\w-]+</string>
			<key>name</key>
			<string>string.name.classes.tag.blade</string>
		</dict>
		<key>tag_id</key>
		<dict>
			<key>match</key>
			<string>#[\w-]+</string>
			<key>name</key>
			<string>constant.id.tag.blade</string>
		</dict>
		<key>tag_name</key>
		<dict>
			<key>begin</key>
			<string>([#!]\{(?=.*?\}))|(\w(([\w:-]+[\w-])|([\w-]*)))</string>
			<key>end</key>
			<string>(\G(?&lt;!\5[^\w-]))|\}|$</string>
			<key>name</key>
			<string>entity.name.tag.blade</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>\G(?&lt;=\{)</string>
					<key>end</key>
					<string>(?=\})</string>
					<key>name</key>
					<string>entity.name.tag.blade</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>{</string>
							<key>name</key>
							<string>invalid.illegal.tag.blade</string>
						</dict>
						<dict>
							<key>include</key>
							<string>source.js</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>tag_text</key>
		<dict>
			<key>begin</key>
			<string>(?=.)</string>
			<key>end</key>
			<string>$</string>
			<key>name</key>
			<string>text.blade</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#embedded_html</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#html_entity</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#interpolated_value</string>
				</dict>
			</array>
		</dict>
		<key>unbuffered_code</key>
		<dict>
			<key>begin</key>
			<string>(-|(([a-zA-Z0-9_]+)\s+=))</string>
			<key>beginCaptures</key>
			<dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>variable.parameter.javascript.embedded.blade</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>name = function() {}</string>
			<key>end</key>
			<string>$</string>
			<key>name</key>
			<string>javascript.embedded.blade</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>source.js</string>
				</dict>
			</array>
		</dict>
	</dict>
	<key>scopeName</key>
	<string>source.blade</string>
	<key>uuid</key>
	<string>eee6ba25-6ac2-4f7e-9c70-cddf2bd3448b</string>
</dict>
</plist>
